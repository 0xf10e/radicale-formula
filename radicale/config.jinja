# Config file for Radicale - A simple calendar server
#
# Generated via SaltStack and populated with values from 
# Salt's Pillar. The sections in this configfile correspond
# to sub-dictionaries in the Pillar-key 'radicale', i.e.
# "hosts" in "[server]" is set to pillar[radicale:server:hosts].
# 
# For most settings if no pillar-values are present defaults 
# from FreeBSD's package "py27-radicale-0.8.1" are used.

[server]
# CalDAV server hostnames separated by a comma
# IPv4 syntax: address:port
# IPv6 syntax: [address]:port
# IPv6 adresses are configured to only allow IPv6 connections
### pillar[radicale:server:hosts] has to be a list.
hosts = {% for host in salt['pillar.get']('radicale:server:hosts',['0.0.0.0:5232']) -%}
{{ host }} {%- if not loop.last %}, {% endif %}
{%- endfor %}
# Daemon flag
### The value of this one depends on your init-system 
### (sysv-init, upstart, systemd,...). If you really 
### need to override the value chosen for your platform 
### set pillar[radicale:lookup:server:daemon].
daemon = {{ radicale.daemon }}
# File storing the PID in daemon mode
pid =
# SSL flag, enable HTTPS protocol
ssl = {{ salt['pillar.get']('radicale:server:ssl','False') }}
# SSL certificate path
certificate = {{ salt['pillar.get']('radicale:server:certificate','/usr/local/etc/apache2/ssl/server.crt') }}
# SSL private key
key = {{ salt['pillar.get']('radicale:server:key','/usr/local/etc/apache2/ssl/server.key') }}
# Reverse DNS to resolve client address in logs
dns_lookup = {{ salt['pillar.get']('radicale:server:dns_lookup','True') }}
# Root URL of Radicale (starting and ending with a slash)
base_prefix = {{ salt['pillar.get']('radicale:server:base_prefix','/') }}
# Message displayed in the client when a password is needed
realm = {{ salt['pillar.get']('radicale:server:realm', 'Radicale - Password Required') }}


[encoding]
# Encoding for responding requests
request = {{ salt['pillar.get']('radicale:server:request','utf-8') }}
# Encoding for storing local collections
stock = {{ salt['pillar.get']('radicale:server:stock','utf-8') }}


[auth]
# Authentication method
# Value: None | htpasswd | IMAP | LDAP | PAM | courier | http
type = {{ salt['pillar.get']('radicale:auth:type','htpasswd') }}

# Usernames used for public collections, separated by a comma
public_users = {% for user in salt['pillar.get']('radicale:auth:public_users',['public']) -%}
{{ user }}{% if not loop.last %}, {% endif%}
{%- endfor %}
# Usernames used for private collections, separated by a comma
private_users = {% for user in salt['pillar.get']('radicale:auth:public_users',['private']) -%}
{{ user }}{% if not loop.last %}, {% endif%}
{%- endfor %}

# Htpasswd filename
htpasswd_filename = {{ salt['pillar.get']('radicale:auth:htpasswd_filename',radicale.htpasswd_filename) }}
# Htpasswd encryption method
# Value: plain | sha1 | crypt
htpasswd_encryption = {{ salt['pillar.get']('radicale:auth:htpasswd_encryption','sha1') }}

# LDAP server URL, with protocol and port
ldap_url = {{ salt['pillar.get']('radicale:auth:ldap_url','ldap://localhost:389/') }}
# LDAP base path
ldap_base = {{ salt['pillar.get']('radicale:auth:ldap_base','ou=users,dc=example,dc=com') }}
# LDAP login attribute
ldap_attribute = {{ salt['pillar.get']('radicale:auth:ldap_attribute','uid') }}
# LDAP filter string
# placed as X in a query of the form (&(...)X)
# example: (objectCategory=Person)(objectClass=User)(memberOf=cn=calenderusers,ou=users,dc=example,dc=org)
# leave empty if no additional filter is needed
ldap_filter = {{ salt['pillar.get']('radicale:auth:ldap_filter','') }}
# LDAP dn for initial login, used if LDAP server does not allow anonymous searches
# Leave empty if searches are anonymous
ldap_binddn = {{ salt['pillar.get']('radicale:auth:ldap_binddn','') }}
# LDAP password for initial login, used with ldap_binddn
ldap_password = {{ salt['pillar.get']('radicale:auth:ldap_password','') }}
# LDAP scope of the search
ldap_scope = {{ salt['pillar.get']('radicale:auth:ldap_scope','OneLevel') }}

# IMAP Configuration
imap_hostname = {{ salt['pillar.get']('radicale:auth:imap_hostname','localhost') }}
imap_port = {{ salt['pillar.get']('radicale:auth:imap_port','143') }}
imap_ssl = {{ salt['pillar.get']('radicale:auth:imap_ssl','False') }}

# PAM group user should be member of
pam_group_membership = {{ salt['pillar.get']('radicale:auth:pam_group_membership','') }}

# Path to the Courier Authdaemon socket
courier_socket = {{ salt['pillar.get']('radicale:auth:courier_socket','') }}

# HTTP authentication request URL endpoint
http_url = {{ salt['pillar.get']('radicale:auth:http_url','') }}
# POST parameter to use for username
http_user_parameter = {{ salt['pillar.get']('radicale:auth:http_user_parameter','') }}
# POST parameter to use for password
http_password_parameter = {{ salt['pillar.get']('radicale:auth:http_password_parameter','') }}


[rights]
{%- set rights_type = salt['pillar.get']('radicale:rights:type','owner_only') %}
# Rights management method
# Value: None | owner_only | owner_write | from_file
type = {{ rights_type }}

# File for rights management from_file
{%- if rights_type == 'from_file' %}
file = {{ salt['pillar.get']('radicale:rights:file',radicale.rights_file) }}
{%- else %}
#file = {{ radicale.rights_file }}
{%- endif %}

[storage]
# Storage backend
# Value: filesystem | database
type = {{ salt['pillar.get']('radicale:storage:type','filesystem') }}

# Folder for storing local collections, created if not present
filesystem_folder = {{ salt['pillar.get']('radicale:storage:filesystem_folder',radicale.filesystem_folder) }}

# Database URL for SQLAlchemy
# dialect+driver://user:password@host/dbname[?key=value..]
# For example: sqlite:///var/db/radicale.db, postgresql://user:password@localhost/radicale
# See http://docs.sqlalchemy.org/en/rel_0_8/core/engines.html#sqlalchemy.create_engine
database_url =


[logging]
# Logging configuration file
# If no config is given, simple information is printed on the standard output
# For more information about the syntax of the configuration file, see:
# http://docs.python.org/library/logging.config.html
config = /usr/local/etc/radicale/logging
# Set the default logging level to debug
debug = {{ salt['pillar.get']('radicale:logging:debug',False) }}
# Store all environment variables (including those set in the shell)
full_environment = False


# Additional HTTP headers
#[headers]
#Access-Control-Allow-Origin = *
